/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package panel;

import Model.NhanVien;
import Repository.MsgBox;
import Repository.XQR;
import Service.poloService;
import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;
import com.google.zxing.Result;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.Base64;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;

/**
 *
 * @author huuho
 */
public class ScannerQR extends javax.swing.JDialog {

    /**
     * Creates new form ScannerQR
     */
    poloService nhanvienDAO = new poloService();
    public static NhanVien nv = null;
    public static String url = null;
    boolean flag = true;

    public ScannerQR(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        openCamera();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlWebcam = new javax.swing.JPanel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        lblImageQR = new javax.swing.JLabel();
        lblExit = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        pnlWebcam.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 181, 204), 5));
        pnlWebcam.setOpaque(false);
        pnlWebcam.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        pnlWebcam.add(jLayeredPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 230, -1, -1));

        lblImageQR.setBackground(new java.awt.Color(255, 255, 255));
        lblImageQR.setFont(new java.awt.Font("Segoe UI Emoji", 0, 10)); // NOI18N
        lblImageQR.setForeground(new java.awt.Color(6, 43, 142));
        lblImageQR.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblImageQR.setText("Image QRCODE");
        lblImageQR.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(6, 43, 142), 2, true));
        lblImageQR.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblImageQR.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblImageQR.setOpaque(true);
        lblImageQR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblImageQRMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblImageQRMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblImageQRMouseExited(evt);
            }
        });

        lblExit.setBackground(new java.awt.Color(255, 255, 255));
        lblExit.setFont(new java.awt.Font("Segoe UI Emoji", 0, 10)); // NOI18N
        lblExit.setForeground(new java.awt.Color(6, 43, 142));
        lblExit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblExit.setText("Exit");
        lblExit.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(6, 43, 142), 2, true));
        lblExit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblExit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblExit.setOpaque(true);
        lblExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblExitMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblExitMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblExitMouseExited(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(169, 169, 169)
                .addComponent(lblImageQR, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addComponent(lblExit, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(190, 190, 190))
            .addComponent(pnlWebcam, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlWebcam, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lblImageQR, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblExit, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void lblImageQRMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblImageQRMouseClicked
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        fc.removeChoosableFileFilter(fc.getFileFilter());
        fc.setDialogTitle("Open");
        fc.addChoosableFileFilter(new FileNameExtensionFilter("PNG and JPG (.png & .jpg)", "png", "jpg"));
        if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            readImageQR(fc.getSelectedFile());
        }
    }//GEN-LAST:event_lblImageQRMouseClicked

    private void lblImageQRMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblImageQRMouseEntered
        // TODO add your handling code here:
        mouseEnteredColor(lblImageQR);
    }//GEN-LAST:event_lblImageQRMouseEntered

    private void lblImageQRMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblImageQRMouseExited
        // TODO add your handling code here:
        mouseExitedColor(lblImageQR);
    }//GEN-LAST:event_lblImageQRMouseExited

    private void lblExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblExitMouseClicked
        // TODO add your handling code here:
        flag = false;
    }//GEN-LAST:event_lblExitMouseClicked

    private void lblExitMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblExitMouseEntered
        // TODO add your handling code here:
        mouseEnteredColor(lblExit);
    }//GEN-LAST:event_lblExitMouseEntered

    private void lblExitMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblExitMouseExited
        // TODO add your handling code here:
        mouseExitedColor(lblExit);
    }//GEN-LAST:event_lblExitMouseExited

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ScannerQR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ScannerQR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ScannerQR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ScannerQR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ScannerQR dialog = new ScannerQR(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLabel lblExit;
    private javax.swing.JLabel lblImageQR;
    private javax.swing.JPanel pnlWebcam;
    // End of variables declaration//GEN-END:variables
      private void mouseEnteredColor(JLabel button) {
        button.setBackground(new Color(26, 33, 86));
        button.setForeground(Color.WHITE);
        button.setFont(new java.awt.Font("Segoe UI Emoji", 1, 10));
    }

    private void mouseExitedColor(JLabel button) {
        button.setBackground(Color.WHITE);
        button.setForeground(new Color(6, 43, 142));
        button.setFont(new java.awt.Font("Segoe UI Emoji", 0, 10));
    }
    public static Webcam webcam = null;
    static WebcamPanel webcamPanel = null;

    public void openCamera() {
        Dimension dimension = WebcamResolution.VGA.getSize();
        webcam = Webcam.getWebcams().get(1);
        webcam.setViewSize(dimension);
        webcamPanel = new WebcamPanel(webcam);
        pnlWebcam.add(webcamPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, 500));
        Thread thread = new Thread() {
            int i = 0;

            @Override
            public void run() {
                while (flag) {
                    checkImage(webcam.getImage());
                    i++;
                }
                webcam.close();
                dispose();

            }
        };
        thread.setDaemon(true);
        thread.start();
    }

    public NhanVien checkImage(BufferedImage img) {
        BufferedImage bi = null;
        Result rs = null;
        if ((bi = img) != null) {
            try {
                rs = XQR.readQR(bi);
                if (rs != null) {
                    try {
                        String maNV = new String(Base64.getDecoder().decode(rs.getText())).trim();
                        this.nv = nhanvienDAO.getNVLogin(maNV.substring(0, maNV.lastIndexOf("$")), maNV.substring(maNV.lastIndexOf("$") + 1));
                        if (this.nv.getMaNV() != null) {
                            flag = false;
                            return this.nv;
                        } else {
                            MsgBox.alert(null, "Tài Khoản Không Tồn Tại");
                            flag = false;
                        }
                        dispose();
                        webcam.close();
                    } catch (Exception e) {
                        this.url = rs.getText();
                        dispose();
                        webcam.close();
                        flag = false;
                    }
                }

            } catch (Exception e) {
            }
        }
        return null;
    }

    public NhanVien readImageQR(File file) {
        Result rs = null;
        try {
            rs = XQR.readQR(file);
            if (rs != null) {
                String maNV = new String(Base64.getDecoder().decode(rs.getText())).trim();
                this.nv = nhanvienDAO.getNVLogin(maNV.substring(0, maNV.lastIndexOf("$")), maNV.substring(maNV.lastIndexOf("$") + 1));
                if (this.nv.getMaNV() == null) {
                    MsgBox.alert(null, "Tài Khoản Không Tồn Tại");
                    flag = false;
                } else {
                    flag = false;
                    return this.nv;
                }
            }
        } catch (Exception e) {
            if (rs == null) {
                MsgBox.alert(null, "Ảnh Không Hợp Lệ");
                flag = false;
                dispose();
                webcam.close();
            } else {
                flag = false;
                this.url = rs.getText();
                dispose();
                webcam.close();
            }
        }
        return null;
    }
}
